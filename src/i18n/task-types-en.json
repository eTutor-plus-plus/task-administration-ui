{
  "taskTypes": {
    "none": {
      "title": "No Type"
    },
    "binary-search": {
      "title": "Binary Search",
      "fields": {
        "solution": "Solution"
      }
    },
    "jdbc": {
      "title": "JDBC",
      "fields": {
        "solution": "Instruction:"
      }
    },
    "xquery": {
      "title": "XQuery",
      "fields": {
        "solution": "Solution",
        "sorting": "Sorting (XPath)",
        "missingNodePenalty": "Missing Node: Penalty",
        "missingNodeStrategy": "Missing Node: Strategy",
        "superfluousNodePenalty": "Superfluous Node: Penalty",
        "superfluousNodeStrategy": "Superfluous Node: Strategy",
        "displacedNodePenalty": "Displaced Node: Penalty",
        "displacedNodeStrategy": "Displaced Node: Strategy",
        "missingAttributePenalty": "Missing Attribute: Penalty",
        "missingAttributeStrategy": "Missing Attribute: Strategy",
        "superfluousAttributePenalty": "Superfluous Attribute: Penalty",
        "superfluousAttributeStrategy": "Superfluous Attribute: Strategy",
        "incorrectTextPenalty": "Incorrect Text: Penalty",
        "incorrectTextStrategy": "Incorrect Text: Strategy",
        "incorrectAttributeValuePenalty": "Incorrect Attribute Value: Penalty",
        "incorrectAttributeValueStrategy": "Incorrect Attribute Value: Strategy"
      },
      "descriptions": {
        "sorting": "If you want to include sorting in the evaluation, define it here. E.g. '//person'. One per line."
      },
      "strategy": {
        "KO": "K.O. Criterion",
        "GROUP": "Once per group",
        "EACH": "Once per element"
      }
    },
    "datalog": {
      "title": "Datalog",
      "fields": {
        "solution": "Solution",
        "query": "Query",
        "uncheckedTerms": "Terms",
        "missingPredicatePenalty": "Missing Predicate: Penalty",
        "missingPredicateStrategy": "Missing Predicate: Strategy",
        "missingFactPenalty": "Missing Fact: Penalty",
        "missingFactStrategy": "Missing Fact: Strategy",
        "superfluousFactPenalty": "Superfluous Fact: Penalty",
        "superfluousFactStrategy": "Superfluous Fact: Strategy"
      },
      "descriptions": {
        "solution": "The rules that represent the solution can be defined here. No query declarations may be made here.",
        "query": "If you want to include several queries in the evaluation, separate them using a semicolon. E.g. hasSon(X,Y)?;hasDaughter(X,Y)?",
        "uncheckedTerms": "To exclude certain terms that occur in the facts from manipulation, define them again here. E.g. 'hasChild(peter,_). to exclude the term 'peter' from the manipulation if it occurs in position 1 of the predicate 'hasChild'. Terms are manipulated during submission to prevent students from simply entering the facts and not the rules."
      },
      "strategy": {
        "KO": "K.O. Criterion",
        "GROUP": "Once per group",
        "EACH": "Once per element"
      }
    },
    "asp": {
      "title": "Answer Set Programming",
      "fields": {
        "solution": "Solution",
        "maxN": "Maximum Integer"
      },
      "descriptions": {
        "solution": "The rules that represent the solution can be defined here. No query declarations may be made here."
      }
    },
    "drools": {
      "title": "Drools",
      "fields": {
        "droolsSolution": "Solution",
        "droolsObjects": "Objects",
        "droolsClasses": "Classes",
        "droolsValidationClassname": "Validation Classname",
        "droolsErrorWeighting": "Error Weighting",
        "droolsAddClass": "Add Class",
        "droolsIsCEP": "Is this a CEP Task?"
      }
    },
      "sql-ddl": {
        "title": "SQL DDL",
        "fields": {
          "sqlDDL": "SQL DDL",
          "solution": "Solution",
          "insertStatements": "Insert Statement",
          "tablePoints": "Points for Table",
          "columnPoints": "Points for Column",
          "constraintPoints": "Points for Constraint",
          "primaryKeyPoints": "Points for Primary Key",
          "foreignKeyPoints": "Points for Foreign Key"
        }
      },
    "sql": {
      "title": "SQL",
      "fields": {
        "solution": "Solution",
        "wrongOrderPenalty": "Wrong Sorting: Penalty",
        "superfluousColumnsPenalty": "Superfluous Column: Penalty"
      },
      "descriptions": {
        "penalty": "A point deduction of -1 means that the submission is awarded 0 points."
      }
    },
    "relalg": {
      "title": "Relational Algebra",
      "fields": {
        "solution": "Solution",
        "sqlSolution": "SQL-Solution",
        "wrongOrderPenalty": "Wrong Sorting: Penalty",
        "superfluousColumnsPenalty": "Superfluous Column: Penalty"
      },
      "descriptions": {
        "penalty": "A point deduction of -1 means that the submission is awarded 0 points."
      }
    },
      "fanf": {
        "title": "Functional Dependencies",
        "fields": {
          "baseRelationName": "Name of the Base Relation",
          "baseRelationAttributes": "Attributes of the Base Relation",
          "baseRelationDependencies": "Dependencies of the Base Relation",
          "subtype": "Subtask",
          "keysDeterminationPenaltyPerMissingKey": "Penalty per Missing Key",
          "keysDeterminationPenaltyPerIncorrectKey": "Penalty per Incorrect Key",
          "attributeClosureBaseAttributes": "Base Attributes",
          "attributeClosurePenaltyPerMissingAttribute": "Penalty per Missing Attribute",
          "attributeClosurePenaltyPerIncorrectAttribute": "Penalty per Incorrect Attribute",
          "minimalCoverPenaltyPerNonCanonicalDependency": "Penalty per Non-Canonical Dependency",
          "minimalCoverPenaltyPerTrivialDependency": "Penalty per Trivial Dependency",
          "minimalCoverPenaltyPerExtraneousAttribute": "Penalty per Extraneous Attribute",
          "minimalCoverPenaltyPerRedundantDependency": "Penalty per Redundant Dependency",
          "minimalCoverPenaltyPerMissingDependencyVsSolution": "Penalty per Missing Dependency vs. Solution",
          "minimalCoverPenaltyPerIncorrectDependencyVsSolution": "Penalty per Incorrect Dependency vs. Solution",
          "normalFormDeterminationPenaltyForIncorrectOverallNormalform": "Penalty for Incorrect Overall Normal Form",
          "normalFormDeterminationPenaltyPerIncorrectDependencyNormalform": "Penalty per Incorrect Dependency Normal Form",
          "normalizationTargetLevel": "Target Normal Form",
          "normalizationMaxLostDependencies": "Max Lost Dependencies",
          "normalizationPenaltyPerLostAttribute": "Penalty per Lost Attribute",
          "normalizationPenaltyForLossyDecomposition": "Penalty for Lossy Decomposition",
          "normalizationPenaltyPerNonCanonicalDependency": "Penalty per Non-Canonical Dependency",
          "normalizationPenaltyPerTrivialDependency": "Penalty per Trivial Dependency",
          "normalizationPenaltyPerExtraneousAttributeInDependencies": "Penalty per Extraneous Attribute in Dependency",
          "normalizationPenaltyPerRedundantDependency": "Penalty per Redundant Dependency",
          "normalizationPenaltyPerExcessiveLostDependency": "Penalty per Excessive Lost Dependency",
          "normalizationPenaltyPerMissingNewDependency": "Penalty per Missing New Dependency",
          "normalizationPenaltyPerIncorrectNewDependency": "Penalty per Incorrect New Dependency",
          "normalizationPenaltyPerMissingKey": "Penalty per Missing Key",
          "normalizationPenaltyPerIncorrectKey": "Penalty per Incorrect Key",
          "normalizationPenaltyPerIncorrectNFRelation": "Penalty per Incorrect NF Relation"
    },
      "descriptions": {
        "penalty": "Ein Punkteabzug von -1 bedeutet, dass die Abgabe mit 0 Punkten bewertet wird."
      },
        "subtype": {
          "keysDetermination": "Key Determination",
          "attributeClosure": "Attribute Closure",
          "minimalCover": "Minimal Cover",
          "normalFormDetermination": "Normal Form Determination",
          "normalization": "Normalization"
        }
      },
    "uml": {
      "title": "UML",
      "fields": {
        "umlBlock": "Block {{id}}",
        "umlSolution": "Solution",
        "umlAddBlock": "Add Block",
        "umlAddAlternative": "Add Alternative",
        "fullComparison": "Fully Compare?",
        "classPoints": "Points per correct Class",
        "relationshipPoints": "Points per correct Association",
        "associationPoints": "Points per correct assignment to Association Class",
        "constraintPoints": "Points per correct Constraint"

      }
    }
  }
}

